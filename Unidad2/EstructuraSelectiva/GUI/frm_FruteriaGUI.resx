<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>